	.286
	OPTION	OFFSET:GROUP
	PUBLIC	CMFINIT,CMAPFIL,FINDSBX,SBXRENC
	EXTRN	OWUPDATE:FAR
	EXTRN	_FINSTR:FAR,_GETSTR:FAR,_PUTSTR:FAR,STR_BUF:BYTE
	EXTRN	__PSP:WORD
DGROUP	GROUP	SBXSUPP_DATA
SBXSUPP_TEXT	SEGMENT	PARA	PUBLIC	'CODE'
	ASSUME	CS:SBXSUPP_TEXT,DS:DGROUP,ES:NOTHING,SS:DGROUP
CMFINIT	PROC	FAR
	PUSH	BP
	MOV	BP,SP
	PUSH	SP
	POP	AX
	CMP	AX,SP
	MOV	AX,1
	JNE	@F
	MOV	AX,3000H
	INT	21H
	XCHG	AL,AH
	MOV	WORD PTR [OSMINOR],AX
	CMP	AX,30AH
	MOV	AX,2
	JB	@F
	MOV	AH,52H
	INT	21H
	MOV	AX,ES:[BX+4]
	MOV	WORD PTR [SFTADDR],AX
	MOV	AX,ES:[BX+6]
	MOV	WORD PTR [SFTADDR+2],AX
	MOV	AX,ES:[BX+16H]
	MOV	WORD PTR [CDSADDR],AX
	MOV	AX,ES:[BX+18H]
	MOV	WORD PTR [CDSADDR+2],AX
	MOV	AX,ES:[BX+20H]
	MOV	[LASTDRV],AH
	XOR	AH,AH
	MOV	BX,[BP+6]
	MOV	[BX],AX
	MOV	AX,1600H
	INT	2FH
	MOV	DX,AX
	MOV	AX,3
	TEST	DL,7FH
	JNZ	@F
	MOV	AH,34H
	INT	21H
	MOV	WORD PTR [INDOSAD],BX
	MOV	WORD PTR [INDOSAD+2],ES
	MOV	AX,2524H
	LEA	DX,[HOOKV24]
	PUSH	DS
	PUSH	CS
	POP	DS
	INT	21H
	POP	DS
	XOR	AX,AX
@@:	POP	BP
	RET	2
CMFINIT	ENDP
CMAPFIL	PROC	FAR
	PUSH	BP
	PUSH	SI
	PUSH	DI
	MOV	BP,SP
	PUSH	[BP+0CH]
	CALL	_GETSTR
	ADD	SP,2
	MOV	CX,10H
	SUB	CX,AX
	LEA	DI,[STR_BUF]
	ADD	DI,AX
	MOV	AX,DS
	MOV	ES,AX
	MOV	AL,2EH
	REP	STOSB
	LEA	SI,[STR_BUF]
	LEA	DI,[ENCRKEY]
	MOV	CX,4
	CALL	BUFDECD
	JNC	@F
	MOV	AX,0FFFFH
	LEA	DX,[NULLMSG]
	JMP	RETERR
@@:	PUSH	BP
	MOV	AX,[ENCRKEY+6]
	MOV	DX,[ENCRKEY+8]
	MOV	BX,[ENCRKEY+0AH]
	CALL	FSTPREP
	MOV	[ENCRKEY+8],AX
	MOV	[ENCRKEY+0AH],DX
	MOV	[ENCRKEY+0CH],BX
	MOV	[ENCRKEY+0EH],BP
	MOV	AX,[ENCRKEY]
	MOV	DX,[ENCRKEY+2]
	MOV	BX,[ENCRKEY+4]
	CALL	FSTPREP
	MOV	[ENCRKEY],AX
	MOV	[ENCRKEY+2],DX
	MOV	[ENCRKEY+4],BX
	MOV	[ENCRKEY+6],BP
	POP	BP
	PUSH	[BP+10H]
	CALL	_GETSTR
	ADD	SP,2
	LEA	SI,[STR_BUF]
	MOV	DL,[SI]
	SUB	DL,40H
	LEA	DI,[NAM_BUF]
	MOV	CX,AX
	MOV	AX,DS
	MOV	ES,AX
	REP	MOVSB
	XOR	AL,AL
	STOSB
	MOV	AH,32H
	PUSH	DS
	INT	21H
	TEST	AL,AL
	MOV	AX,DS
	MOV	ES,AX
	POP	DS
	JZ	@F
	MOV	AX,1
	LEA	DX,[EGDFMSG]
	JMP	RETERR
@@:	MOV	DI,BX
	MOV	WORD PTR [CDPBPTR],DI
	MOV	WORD PTR [CDPBPTR+2],ES
	MOV	AL,ES:[DI]
	DEC	DL
	CMP	AL,DL
	JE	@F
	MOV	AX,2
	LEA	DX,[EIDDMSG]
	JMP	RETERR
@@:	MOV	AX,ES:[DI+2]
	MOV	[BOTSSIZ],AX
	XOR	CX,CX
@@:	SHR	AX,1
	JC	@F
	INC	CX
	JMP	@B
@@:	TEST	AX,AX
	JZ	@F
	MOV	AX,3
	LEA	DX,[EOSSMSG]
	JMP	RETERR
@@:	CMP	CX,6
	JAE	@F
	MOV	AX,4
	LEA	DX,[ELSSMSG]
	JMP	RETERR
@@:	MOV	[SECSHFT],CL
	MOV	AX,[BP+0EH]
	MOV	[NEEDCLU],AX
	MOV	AL,ES:[DI+4]
	INC	AL
	MOV	[MCLUCNT],AL
	MOV	CL,ES:[DI+5]
	MOV	[MCLUSIZ],CL
	ADD	CL,[SECSHFT]
	CMP	CL,0FH
	JBE	@F
	MOV	AX,5
	LEA	DX,[ECTLMSG]
	JMP	RETERR
@@:	CMP	[OSMAJOR],4
	JAE	@F
	MOV	WORD PTR ES:[DI+1CH],0
@@:	JB	@F
	MOV	WORD PTR ES:[DI+1DH],0
@@:	MOV	AH,48H
	MOV	BX,800H
	INT	21H
	JNC	@F
	MOV	[ADDERRC],AX
	MOV	AX,6
	LEA	DX,[EIIMMSG]
	JMP	RETERR
@@:	MOV	[ECSBADR],AX
	MOV	[ECSBFLG],1
	MOV	[GENSTYP],0
	MOV	AX,[NEEDCLU]
	XOR	DX,DX
	MOV	CL,[MCLUSIZ]
	XOR	CH,CH
@@:	SHL	AX,1
	RCL	DX,1
	LOOP	@B
	MOV	CL,0FH
	SUB	CL,[SECSHFT]
	MOV	BX,1
	SHL	BX,CL
	MOV	[CSEQSEC],BX
	SUB	AX,BX
	SBB	DX,0
	JC	SIZERR
	JNZ	@F
	TEST	AX,AX
	JNZ	@F
SIZERR:	MOV	AX,0FFFDH
	LEA	DX,[NULLMSG]
	JMP	RETERR
@@:	MOV	WORD PTR [BOTLSEC],AX
	MOV	WORD PTR [BOTLSEC+2],DX
	PUSH	AX
	TEST	DX,DX
	JZ	@F
	XOR	AX,AX
@@:	MOV	[BOTSSEC],AX
	POP	AX
	MOV	BX,[BOTRDIR]
	SHR	BX,4
	MOV	[DIRSIZE],AX
	INC	BX
	SUB	AX,BX
	SBB	DX,0
	JC	SIZERR
	JNZ	@F
	TEST	AX,AX
	JZ	SIZERR
@@:	XOR	BX,BX
CFSCYC:	INC	BX
	PUSH	AX
	PUSH	DX
	PUSH	BX
	SHL	BX,1
	SUB	AX,BX
	SBB	DX,0
	POP	BX
	JNC	@F
SIZERX:	ADD	SP,4
	JMP	SIZERR
@@:	MOV	CL,1
CCSCYC:	TEST	DX,DX
	JNZ	@F
	CMP	AX,0FFF5H
	JB	CCSDON
@@:	SHL	CL,1
	SHR	DX,1
	RCR	AX,1
	JMP	CCSCYC
CCSDON:	TEST	AX,AX
	JZ	SIZERX
	MOV	[BOTCSIZ],CL
	XOR	CH,CH
	CMP	AX,0FF5H
	JB	@F
	INC	CH
@@:	MOV	[FATTYPE],CH
	ADD	AX,2
	TEST	CH,CH
	JNZ	@F
	INC	AX
	SHR	AX,1
	MOV	CX,AX
	SHL	AX,1
	ADD	AX,CX
	JMP	CFSNXT
@@:	SHL	AX,1
	RCL	DX,1
CFSNXT:	DIV	[BOTSSIZ]
	TEST	DX,DX
	JZ	@F
	INC	AX
@@:	CMP	AX,BX
	POP	DX
	POP	AX
	JA	CFSCYC
	MOV	[BOTSFAT],BX
	LES	BX,[INDOSAD]
	INC	BYTE PTR ES:[BX]
	PUSH	AX
	MOV	AX,800EH
	INT	2AH
	POP	AX
	MOV	[CRITFLG],1
TRYCYC:	MOV	AH,5BH
	XOR	CX,CX
	LEA	DX,[NAM_BUF]
	INT	21H
	JNC	@F
	MOV	[ADDERRC],AX
	MOV	AX,7
	LEA	DX,[EMFCMSG]
	JMP	RETERR
@@:	MOV	[SVDFHND],AX
	MOV	[SVDOFLG],1
	MOV	SI,AX
	MOV	ES,[__PSP]
	LES	BX,ES:[34H]
	MOV	CL,ES:[BX+SI]
	LES	BX,[SFTADDR]
@@:	CMP	CL,ES:[BX+4]
	JB	@F
	SUB	CL,ES:[BX+4]
	LES	BX,ES:[BX]
	JMP	@B
@@:	MOV	AL,35H
	CMP	[OSMAJOR],4
	JB	@F
	MOV	AL,3BH
@@:	MUL	CL
	ADD	BX,6
	ADD	BX,AX
	MOV	AX,ES:[BX+5]
	TEST	AX,0A080H
	JZ	@F
	MOV	[ADDERRC],AX
	MOV	AX,8
	LEA	DX,[EDRFMSG]
	JMP	RETERR
@@:	MOV	WORD PTR [CSFTPTR],BX
	MOV	WORD PTR [CSFTPTR+2],ES
	MOV	AX,ES:[BX+7]
	CMP	AX,WORD PTR [CDPBPTR]
	JNE	@F
	MOV	AX,ES:[BX+9]
	CMP	AX,WORD PTR [CDPBPTR+2]
	JE	DPBMAT
@@:	MOV	AX,9
	LEA	DX,[EDMMMSG]
	JMP	RETERR
DPBMAT:	MOV	[LASTCLU],0
	MOV	WORD PTR [WCURSEC],0
	MOV	WORD PTR [WCURSEC+2],0
INCCYC:	MOV	CL,[MCLUCNT]
	XOR	CH,CH
	MOV	AX,WORD PTR [WCURSEC]
	MOV	DX,WORD PTR [WCURSEC+2]
WDSCYC:	CALL	WRITSEC
	JNC	@F
	MOV	AX,0AH
	LEA	DX,[EOTSMSG]
	JMP	RETERR
@@:	ADD	AX,1
	ADC	DX,0
	LOOP	WDSCYC
	MOV	WORD PTR [WCURSEC],AX
	MOV	WORD PTR [WCURSEC+2],DX
	CMP	[OSMAJOR],4
	JAE	@F
	MOV	AX,ES:[BX+1BH]
@@:	JB	@F
	MOV	AX,ES:[BX+35H]
@@:	MOV	DX,[LASTCLU]
	TEST	DX,DX
	JZ	INCNXT
	INC	DX
	CMP	AX,DX
	JAE	@F
	MOV	AX,0FFFEH
	LEA	DX,[NULLMSG]
	JMP	RETERR
@@:	JE	INCNXT
	MOV	AH,3EH
	MOV	BX,[SVDFHND]
	INT	21H
	MOV	[SVDOFLG],0
	MOV	AH,41H
	LEA	DX,[NAM_BUF]
	INT	21H
	JMP	TRYCYC
INCNXT:	MOV	[LASTCLU],AX
	MOV	AX,ES:[BX+19H]
	INC	AX
	PUSH	AX
	PUSH	BX
	PUSH	ES
	XOR	DX,DX
	PUSH	DX
	PUSH	AX
	PUSH	DX
	PUSH	[NEEDCLU]
	CALL	OWUPDATE
	TEST	AX,AX
	POP	ES
	POP	BX
	POP	AX
	JZ	@F
	MOV	AX,0FFFCH
	LEA	DX,[NULLMSG]
	JMP	RETERR
@@:	CMP	AX,[NEEDCLU]
	JB	INCCYC
	MOV	BYTE PTR ES:[BX+4],3
	PUSH	AX
	MOV	AX,810EH
	INT	2AH
	POP	AX
	LES	BX,[INDOSAD]
	DEC	BYTE PTR ES:[BX]
	MOV	[CRITFLG],0
	MOV	AH,3EH
	MOV	BX,[SVDFHND]
	INT	21H
	MOV	[SVDOFLG],0
	MOV	AH,49H
	MOV	ES,[ECSBADR]
	INT	21H
	MOV	[ECSBFLG],0
	XOR	AX,AX
	LEA	DX,[NULLMSG]
RETURN:	MOV	BX,[BP+0AH]
	MOV	[BX],AX
	MOV	SI,DX
	PUSH	SI
	XOR	CX,CX
@@:	LODSB
	TEST	AL,AL
	JZ	@F
	INC	CX
	CMP	AL,3DH
	JNE	@B
	MOV	DX,[ADDERRC]
	MOV	AL,DH
	CALL	CONVRTB
	MOV	AL,DL
	CALL	CONVRTB
@@:	POP	SI
	PUSH	CX
	LEA	DI,[STR_BUF]
	MOV	AX,DS
	MOV	ES,AX
	REP	MOVSB
	CALL	_PUTSTR
	ADD	SP,2
	POP	DI
	POP	SI
	POP	BP
	RET	8
RETERR:	PUSH	AX
	PUSH	DX
	CMP	[CRITFLG],0
	JZ	@F
	PUSH	AX
	MOV	AX,810EH
	INT	2AH
	POP	AX
	LES	BX,[INDOSAD]
	DEC	BYTE PTR ES:[BX]
	MOV	[CRITFLG],0
@@:	CMP	[SVDOFLG],0
	JZ	@F
	MOV	AH,3EH
	MOV	BX,[SVDFHND]
	INT	21H
	MOV	[SVDOFLG],0
	MOV	AH,41H
	LEA	DX,[STR_BUF]
	INT	21H
@@:	CMP	[ECSBFLG],0
	JZ	@F
	MOV	AH,49H
	MOV	ES,[ECSBADR]
	INT	21H
	MOV	[ECSBFLG],0
@@:	POP	DX
	POP	AX
	JMP	RETURN
CMAPFIL	ENDP
WRITSEC	PROC	NEAR
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	PUSH	ES
	MOV	ES,[ECSBADR]
	TEST	DX,DX
	JNZ	WRSDAT
	MOV	DX,AX
	SUB	AX,[CSEQSEC]
	JNC	WRSVIS
	MOV	CL,[SECSHFT]
	SHL	DX,CL
	PUSH	DX
	CALL	GENCSEC
	POP	DX
	JMP	WRSWRI
WRSVIS:	SUB	AX,1
	JE	WRSFAT
	JA	WRSCHK
	CALL	GENBSEC
	XOR	DX,DX
	JMP	WRSWRI
WRSCHK:	CMP	AX,[BOTSFAT]
	JNE	WRSDAT
WRSFAT:	CALL	GENFSEC
	XOR	DX,DX
	JMP	WRSWRI
WRSDAT:	CALL	GENDSEC
	XOR	DX,DX
WRSWRI:	MOV	AH,40H
	MOV	BX,[SVDFHND]
	MOV	CX,[BOTSSIZ]
	PUSH	DS
	MOV	DS,[ECSBADR]
	INT	21H
	POP	DS
	POP	ES
	POP	DX
	POP	CX
	POP	BX
	POP	AX
	RET
WRITSEC	ENDP
CRC32	PROC	NEAR
	LEA	DI,[CCITT32]
	MOV	AX,0FFFFH
	MOV	DX,0FFFFH
@@:	MOV	BL,ES:[SI]
	XOR	BL,AL
	XOR	BH,BH
	SHL	BX,2
	MOV	AL,AH
	MOV	AH,DL
	MOV	DL,DH
	XOR	DH,DH
	XOR	AX,[BX+DI]
	XOR	DX,[BX+DI+2]
	INC	SI
	LOOP	@B
	NOT	AX
	NOT	DX
	RET
CRC32	ENDP
CHRDECK	PROC	NEAR
	LODSB
	CMP	AL,7AH
	JA	CDKERR
	CMP	AL,60H
	JB	@F
	CMP	AL,61H
	JB	CDKRET
	DEC	AL
@@:	CMP	AL,5BH
	JB	@F
	CMP	AL,5FH
	JB	CDKRET
	SUB	AL,4
@@:	CMP	AL,3AH
	JB	@F
	CMP	AL,41H
	JB	CDKRET
	SUB	AL,7
@@:	CMP	AL,2FH
	JB	@F
	CMP	AL,30H
	JB	CDKRET
	DEC	AL
@@:	SUB	AL,2EH
CDKRET:	RET
CDKERR:	STC
	RET
CHRDECK	ENDP
BUFDECD	PROC	NEAR
BDDCYC:	CALL	CHRDECK
	JC	BDDERR
	MOV	[DI],AL
	CALL	CHRDECK
	JC	BDDERR
	XOR	AH,AH
	SHR	AL,1
	RCR	AH,1
	SHR	AL,1
	RCR	AH,1
	OR	[DI],AH
	INC	DI
	MOV	[DI],AL
	CALL	CHRDECK
	JC	BDDERR
	ROL	AL,4
	MOV	AH,AL
	AND	AH,0F0H
	AND	AL,0FH
	OR	[DI],AH
	INC	DI
	MOV	[DI],AL
	CALL	CHRDECK
	JC	BDDERR
	SHL	AL,2
	OR	[DI],AL
	INC	DI
	LOOP	BDDCYC
	RET
BDDERR:	STC
	RET
BUFDECD	ENDP
FSTPREP	PROC	NEAR
	MOV	CX,20H
	XOR	BP,BP
@@:	XOR	BP,AX
	XOR	BP,DX
	XOR	BP,BX
	ROL	AL,1
	ROR	AH,1
	ADD	DH,AL
	ADD	DL,AH
	ROL	DL,1
	ROR	DH,1
	ADD	BH,DL
	ADD	BL,DH
	ROL	BL,1
	ROR	BH,1
	ADD	AH,BL
	ADD	AL,BH
	LOOP	@B
	RET
FSTPREP	ENDP
FSTENCR	PROC	NEAR
	MOV	AX,[ENCRKEY]
	MOV	DX,[ENCRKEY+2]
	MOV	BX,[ENCRKEY+4]
	MOV	BP,[ENCRKEY+6]
@@:	XOR	BP,AX
	XOR	BP,DX
	XOR	BP,BX
	XOR	ES:[DI],BP
	XOR	DX,ES:[DI]
	ROL	AL,1
	ROR	AH,1
	ADD	DH,AL
	ADD	DL,AH
	ROL	DL,1
	ROR	DH,1
	ADD	BH,DL
	ADD	BL,DH
	ROL	BL,1
	ROR	BH,1
	ADD	AH,BL
	ADD	AL,BH
	ADD	DI,2
	LOOP	@B
	RET
FSTENCR	ENDP
FSTENCB	PROC	NEAR
	MOV	AX,[ENCRKEY+8]
	MOV	DX,[ENCRKEY+0AH]
	MOV	BX,[ENCRKEY+0CH]
	MOV	BP,[ENCRKEY+0EH]
@@:	SUB	DI,2
	XOR	BP,AX
	XOR	BP,DX
	XOR	BP,BX
	XOR	ES:[DI],BP
	XOR	DX,ES:[DI]
	ROL	AL,1
	ROR	AH,1
	ADD	DH,AL
	ADD	DL,AH
	ROL	DL,1
	ROR	DH,1
	ADD	BH,DL
	ADD	BL,DH
	ROL	BL,1
	ROR	BH,1
	ADD	AH,BL
	ADD	AL,BH
	TEST	DI,DI
	JNZ	@B
	RET
FSTENCB	ENDP
FSTDECR	PROC	NEAR
	MOV	AX,[ENCROLD]
	MOV	DX,[ENCROLD+2]
	MOV	BX,[ENCROLD+4]
	MOV	BP,[ENCROLD+6]
@@:	MOV	SI,ES:[DI]
	XOR	BP,AX
	XOR	BP,DX
	XOR	BP,BX
	XOR	ES:[DI],BP
	XOR	DX,SI
	ROL	AL,1
	ROR	AH,1
	ADD	DH,AL
	ADD	DL,AH
	ROL	DL,1
	ROR	DH,1
	ADD	BH,DL
	ADD	BL,DH
	ROL	BL,1
	ROR	BH,1
	ADD	AH,BL
	ADD	AL,BH
	ADD	DI,2
	LOOP	@B
	RET
FSTDECR	ENDP
FSTDECB	PROC	NEAR
	MOV	AX,[ENCROLD+8]
	MOV	DX,[ENCROLD+0AH]
	MOV	BX,[ENCROLD+0CH]
	MOV	BP,[ENCROLD+0EH]
@@:	SUB	DI,2
	MOV	SI,ES:[DI]
	XOR	BP,AX
	XOR	BP,DX
	XOR	BP,BX
	XOR	ES:[DI],BP
	XOR	DX,SI
	ROL	AL,1
	ROR	AH,1
	ADD	DH,AL
	ADD	DL,AH
	ROL	DL,1
	ROR	DH,1
	ADD	BH,DL
	ADD	BL,DH
	ROL	BL,1
	ROR	BH,1
	ADD	AH,BL
	ADD	AL,BH
	TEST	DI,DI
	JNZ	@B
	RET
FSTDECB	ENDP
GENCSEC	PROC	NEAR
	CMP	[GENSTYP],1
	JE	@F
	MOV	CX,8000H
	XOR	SI,SI
	CALL	CRC32
	MOV	WORD PTR [BOTKFCS],AX
	MOV	WORD PTR [BOTKFCS+2],DX
	MOV	CX,4000H
	XOR	DI,DI
	PUSH	BP
	CALL	FSTENCR
	CALL	FSTENCB
	POP	BP
	MOV	[GENSTYP],1
@@:	RET
GENCSEC	ENDP
GENBSEC	PROC	NEAR
	CMP	[GENSTYP],2
	JE	@F
	MOV	CX,OFFSET BOTENDA-OFFSET BOTSTRT
	MOV	AX,[BOTSSIZ]
	SUB	AX,CX
	LEA	SI,[BOTSTRT]
	XOR	DI,DI
	REP	MOVSB
	MOV	CX,AX
	XOR	AL,AL
	REP	STOSB
	MOV	[GENSTYP],2
@@:	RET
GENBSEC	ENDP
GENFSEC	PROC	NEAR
	CMP	[GENSTYP],3
	JE	@F
	XOR	AX,AX
	MOV	CX,[BOTSSIZ]
	SHR	CX,1
	PUSH	CX
	XOR	DI,DI
	REP	STOSW
	XOR	DI,DI
	MOV	AL,0F8H
	STOSB
	MOV	AL,0FFH
	MOV	CX,2
	ADD	CL,[FATTYPE]
	REP	STOSB
	POP	CX
	XOR	DI,DI
	PUSH	BP
	CALL	FSTENCR
	CALL	FSTENCB
	POP	BP
	MOV	[GENSTYP],3
@@:	RET
GENFSEC	ENDP
GENDSEC	PROC	NEAR
	CMP	[GENSTYP],4
	JE	@F
	XOR	AX,AX
	MOV	CX,[BOTSSIZ]
	SHR	CX,1
	PUSH	CX
	XOR	DI,DI
	REP	STOSW
	POP	CX
	XOR	DI,DI
	PUSH	BP
	CALL	FSTENCR
	CALL	FSTENCB
	POP	BP
	MOV	[GENSTYP],4
@@:	RET
GENDSEC	ENDP
CONVRTB	PROC	NEAR
	PUSH	DX
	DB	0D4H,10H
	MOV	DL,AH
	CALL	CONVRTN
	MOV	DL,AL
	CALL	CONVRTN
	POP	DX
	RET
CONVRTB	ENDP
CONVRTN	PROC	NEAR
	ADD	DL,30H
	CMP	DL,39H
	JBE	@F
	ADD	DL,7
@@:	MOV	[SI],DL
	INC	SI
	INC	CX
	RET
CONVRTN	ENDP
FINDSBX	PROC	FAR
	PUSH	BP
	PUSH	SI
	PUSH	DI
	MOV	BP,SP
	MOV	AX,[BP+0CH]
	CMP	AL,[LASTDRV]
	JAE	FSDINV
	MOV	AH,51H
	CMP	[OSMAJOR],4
	JB	@F
	MOV	AH,58H
@@:	MUL	AH
	LES	BX,[CDSADDR]
	ADD	BX,AX
	MOV	AX,ES:[BX+43H]
	TEST	AX,AX
	JS	FSDALI
	TEST	AX,4000H
	JZ	FSDINV
	TEST	AX,2000H
	JNZ	FSDINV
	TEST	AX,1000H
	JNZ	FSDALI
	LES	BX,ES:[BX+45H]
	MOV	AX,ES:[BX+2]
	MOV	[BOTSSIZ],AX
	CMP	[OSMAJOR],4
	JAE	@F
	LES	DI,ES:[BX+12H]
@@:	JB	@F
	LES	DI,ES:[BX+13H]
@@:	ADD	DI,12H
	LEA	SI,[SBXSIGN]
	MOV	CX,4
	REPE	CMPSW
	JNE	FSDALI
	MOV	WORD PTR [SBXDPTR],DI
	MOV	WORD PTR [SBXDPTR+2],ES
	PUSH	[BP+0AH]
	CALL	_GETSTR
	ADD	SP,2
	MOV	CX,10H
	SUB	CX,AX
	LEA	DI,[STR_BUF]
	ADD	DI,AX
	MOV	AX,DS
	MOV	ES,AX
	MOV	AL,2EH
	REP	STOSB
	LEA	SI,[STR_BUF]
	LEA	DI,[ENCROLD]
	MOV	CX,4
	CALL	BUFDECD
	JC	FSDKEY
	MOV	AX,[ENCROLD+6]
	MOV	DX,[ENCROLD+8]
	MOV	BX,[ENCROLD+0AH]
	CALL	FSTPREP
	MOV	[ENCROLD+8],AX
	MOV	[ENCROLD+0AH],DX
	MOV	[ENCROLD+0CH],BX
	MOV	[ENCROLD+0EH],BP
	MOV	AX,[ENCROLD]
	MOV	DX,[ENCROLD+2]
	MOV	BX,[ENCROLD+4]
	CALL	FSTPREP
	MOV	[ENCROLD],AX
	MOV	[ENCROLD+2],DX
	MOV	[ENCROLD+4],BX
	MOV	[ENCROLD+6],BP
	MOV	CX,8
	LEA	SI,[ENCROLD]
	LES	DI,[SBXDPTR]
	REPE	CMPSW
	JNE	FSDKEY
	XOR	AX,AX
FSDRET:	POP	DI
	POP	SI
	POP	BP
	RET	4
FSDINV:	MOV	AX,1
	JMP	FSDRET
FSDALI:	MOV	AX,2
	JMP	FSDRET
FSDKEY:	MOV	AX,3
	JMP	FSDRET
FINDSBX	ENDP
SBXRENC	PROC	FAR
	PUSH	BP
	PUSH	SI
	PUSH	DI
	MOV	BP,SP
	MOV	AX,[BP+0AH]
	MOV	[ADDERRC],AX
	PUSH	[BP+0CH]
	CALL	_GETSTR
	ADD	SP,2
	MOV	CX,10H
	SUB	CX,AX
	LEA	DI,[STR_BUF]
	ADD	DI,AX
	MOV	AX,DS
	MOV	ES,AX
	MOV	AL,2EH
	REP	STOSB
	LEA	SI,[STR_BUF]
	LEA	DI,[ENCRKEY]
	MOV	CX,4
	CALL	BUFDECD
	JNC	@F
	MOV	AX,1
	JMP	SRERET
@@:	MOV	AX,[ENCRKEY+6]
	MOV	DX,[ENCRKEY+8]
	MOV	BX,[ENCRKEY+0AH]
	CALL	FSTPREP
	MOV	[ENCRKEY+8],AX
	MOV	[ENCRKEY+0AH],DX
	MOV	[ENCRKEY+0CH],BX
	MOV	[ENCRKEY+0EH],BP
	MOV	AX,[ENCRKEY]
	MOV	DX,[ENCRKEY+2]
	MOV	BX,[ENCRKEY+4]
	CALL	FSTPREP
	MOV	[ENCRKEY],AX
	MOV	[ENCRKEY+2],DX
	MOV	[ENCRKEY+4],BX
	MOV	[ENCRKEY+6],BP
	MOV	AH,48H
	MOV	BX,800H
	INT	21H
	JNC	@F
	MOV	AX,2
	JMP	SRERET
@@:	MOV	[ECSBADR],AX
	MOV	[ECSBFLG],1
	MOV	AH,54H
	INT	21H
	MOV	[DOSVERF],AL
	LES	BX,[INDOSAD]
	INC	BYTE PTR ES:[BX]
	PUSH	AX
	MOV	AX,800EH
	INT	2AH
	POP	AX
	MOV	[CRITFLG],1
	LES	DI,[SBXDPTR]
	MOV	AX,ES:[DI+14H]
	MOV	DX,ES:[DI+16H]
	PUSH	AX
	PUSH	DX
	MOV	BX,ES:[DI+1AH]
	SUB	AX,BX
	SBB	DX,0
	MOV	WORD PTR [WCURSEC],AX
	MOV	WORD PTR [WCURSEC+2],DX
	MOV	[CSEQSEC],BX
	CALL	RERDSEC
	JNC	@F
	ADD	SP,4
	MOV	AX,3
	JMP	SRERET
@@:	PUSH	DI
	PUSH	ES
	MOV	ES,[ECSBADR]
	MOV	DI,8000H
	CALL	FSTDECB
	MOV	CX,4000H
	CALL	FSTDECR
	MOV	CX,4000H
	XOR	DI,DI
	CALL	FSTENCR
	CALL	FSTENCB
	POP	ES
	POP	DI
	CALL	REWRSEC
	POP	WORD PTR [WCURSEC+2]
	POP	WORD PTR [WCURSEC]
	JNC	@F
	MOV	AX,4
	JMP	SRERET
@@:	MOV	[CSEQSEC],1
	MOV	DX,ES:[DI+1CH]
	MOV	CX,ES:[DI+1EH]
	MOV	WORD PTR [WSECCNT],0
	MOV	WORD PTR [WSECCNT+2],0
SRECYC:	ADD	WORD PTR [WCURSEC],1
	ADC	WORD PTR [WCURSEC+2],0
	ADD	WORD PTR [WSECCNT],1
	ADC	WORD PTR [WSECCNT+2],0
	PUSH	CX
	PUSH	DX
	PUSH	DI
	PUSH	ES
	PUSH	WORD PTR [WSECCNT+2]
	PUSH	WORD PTR [WSECCNT]
	PUSH	WORD PTR ES:[DI+1EH]
	PUSH	WORD PTR ES:[DI+1CH]
	CALL	OWUPDATE
	POP	ES
	POP	DI
	POP	DX
	POP	CX
	TEST	AX,AX
	JZ	@F
	MOV	AX,5
	JMP	SRERET
@@:	SUB	DX,1
	SBB	CX,0
	MOV	AX,CX
	OR	AX,DX
	JZ	SREDON
	PUSH	CX
	PUSH	DX
	CALL	RERDSEC
	JNC	@F
	ADD	SP,4
	MOV	AX,3
	JMP	SRERET
@@:	PUSH	DI
	PUSH	ES
	MOV	ES,[ECSBADR]
	MOV	DI,[BOTSSIZ]
	CALL	FSTDECB
	MOV	CX,[BOTSSIZ]
	SHR	CX,1
	CALL	FSTDECR
	MOV	CX,[BOTSSIZ]
	SHR	CX,1
	XOR	DI,DI
	CALL	FSTENCR
	CALL	FSTENCB
	POP	ES
	POP	DI
	CALL	REWRSEC
	POP	DX
	POP	CX
	JNC	SRECYC
	MOV	AX,4
	JMP	SRERET
SREDON:	MOV	CX,8
	LEA	SI,[ENCRKEY]
	LES	DI,[SBXDPTR]
	REP	MOVSW
	XOR	AX,AX
SRERET:	PUSH	AX
	CMP	[CRITFLG],0
	JZ	@F
	PUSH	AX
	MOV	AX,810EH
	INT	2AH
	POP	AX
	LES	BX,[INDOSAD]
	DEC	BYTE PTR ES:[BX]
	MOV	[CRITFLG],0
@@:	CMP	[ECSBFLG],0
	JZ	@F
	MOV	AH,49H
	MOV	ES,[ECSBADR]
	INT	21H
	MOV	[ECSBFLG],0
@@:	POP	AX
	POP	DI
	POP	SI
	POP	BP
	RET	4
SBXRENC	ENDP
RERDSEC	PROC	NEAR
	MOV	BYTE PTR ES:[DI+22H],4
	MOV	WORD PTR ES:[DI+23H],0
	MOV	WORD PTR ES:[DI+2EH],0
	MOV	AX,[ECSBADR]
	MOV	ES:[DI+30H],AX
	MOV	AX,[CSEQSEC]
	MOV	ES:[DI+32H],AX
	MOV	AX,WORD PTR [WCURSEC]
	MOV	DX,WORD PTR [WCURSEC+2]
	MOV	ES:[DI+3AH],AX
	MOV	ES:[DI+3CH],DX
	CMP	BYTE PTR ES:[DI+18H],0
	JZ	@F
	MOV	AX,0FFFFH
@@:	MOV	ES:[DI+34H],AX
	MOV	BX,DI
	ADD	BX,20H
	PUSH	DS
	LDS	SI,ES:[DI+10H]
	PUSH	SI
	MOV	AX,[SI+6]
	MOV	ES:[DI+10H],AX
	CALL	DWORD PTR ES:[DI+10H]
	MOV	AX,[SI+8]
	MOV	ES:[DI+10H],AX
	CALL	DWORD PTR ES:[DI+10H]
	POP	ES:[DI+10H]
	POP	DS
	MOV	AX,ES:[DI+23H]
	TEST	AX,AX
	JNS	@F
	MOV	BX,[ADDERRC]
	MOV	[BX],AX
	STC
@@:	RET
RERDSEC	ENDP
REWRSEC	PROC	NEAR
	MOV	AL,[DOSVERF]
	ADD	AL,8
	MOV	ES:[DI+22H],AL
	MOV	WORD PTR ES:[DI+23H],0
	MOV	WORD PTR ES:[DI+2EH],0
	MOV	AX,[ECSBADR]
	MOV	ES:[DI+30H],AX
	MOV	AX,[CSEQSEC]
	MOV	ES:[DI+32H],AX
	MOV	AX,WORD PTR [WCURSEC]
	MOV	DX,WORD PTR [WCURSEC+2]
	MOV	ES:[DI+3AH],AX
	MOV	ES:[DI+3CH],DX
	CMP	BYTE PTR ES:[DI+18H],0
	JZ	@F
	MOV	AX,0FFFFH
@@:	MOV	ES:[DI+34H],AX
	MOV	BX,DI
	ADD	BX,20H
	PUSH	DS
	LDS	SI,ES:[DI+10H]
	PUSH	SI
	MOV	AX,[SI+6]
	MOV	ES:[DI+10H],AX
	CALL	DWORD PTR ES:[DI+10H]
	MOV	AX,[SI+8]
	MOV	ES:[DI+10H],AX
	CALL	DWORD PTR ES:[DI+10H]
	POP	ES:[DI+10H]
	POP	DS
	MOV	AX,ES:[DI+23H]
	TEST	AX,AX
	JNS	@F
	MOV	BX,[ADDERRC]
	MOV	[BX],AX
	STC
@@:	RET
REWRSEC	ENDP
HOOKV24	PROC	FAR
	MOV	AL,3
	IRET
HOOKV24	ENDP
SBXSUPP_TEXT	ENDS
SBXSUPP_DATA	SEGMENT	WORD	PUBLIC	'DATA'
OSMINOR	DB	?
OSMAJOR	DB	?
SFTADDR	DD	?
CDSADDR	DD	?
LASTDRV	DB	?
ENCRKEY	DW	8 DUP(?)
ENCROLD	DW	8 DUP(?)
BOTSTRT	DB	0EBH,0FEH,90H
SBXSIGN	DB	'SteelBox'
BOTSSIZ	DW	?
BOTCSIZ	DB	?
	DW	1
	DB	2
BOTRDIR	DW	200H
BOTSSEC	DW	?
	DB	0F8H
BOTSFAT	DW	?
	DW	1
	DW	1
	DD	0
BOTLSEC	DD	?
BOTKFCS	DD	?
BOTENDA	LABEL	BYTE
FATTYPE	DB	?
SVDFHND	DW	?
SVDOFLG	DB	0
ECSBADR	DW	?
ECSBFLG	DB	0
GENSTYP	DB	?
ADDERRC	DW	?
CSFTPTR	DD	?
CDPBPTR	DD	?
SECSHFT	DB	?
NEEDCLU	DW	?
MCLUSIZ	DB	?
MCLUCNT	DB	?
LASTCLU	DW	?
DIRSIZE	DW	?
WCURSEC	DD	?
WSECCNT	DD	?
CSEQSEC	DW	?
SBXDPTR	DD	?
DOSVERF	DB	?
INDOSAD	DD	?
CRITFLG	DB	0
	INCLUDE	\USER\ARC\CRC\CCITT32.INC
NAM_BUF	DB	256 DUP(?)
NULLMSG	DB	' ',0
EGDFMSG	DB	'Get DPB for host drive DOS call failed',0
EIDDMSG	DB	'Drive number in host drive DPB does not match the expected one',0
EOSSMSG	DB	'Host drive sector size is not a power of 2',0
ELSSMSG	DB	'Host drive sector size is less than 64 bytes',0
ECTLMSG	DB	'Host drive cluster size is more than 32768 bytes',0
EIIMMSG	DB	'Cannot allocate memory block, DOS error code='
EMFCMSG	DB	'Cannot create volume file, DOS error code='
EDRFMSG	DB	'File handle does not reference a local file, SFT flags word='
EDMMMSG	DB	'DPB pointer in volume file SFT does not match the expected one',0
EOTSMSG	DB	'DOS failed to allocate a cluster for volume file',0
SBXSUPP_DATA	ENDS
	END
