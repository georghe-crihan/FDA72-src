	.286
	OPTION	OFFSET:GROUP
	PUBLIC	_SWINFDCPROC,M$SWINFDC_INTR,M$SWINFDC_NEAR
	PUBLIC	FDARDID,FDASPOS
	PUBLIC	FDAAGAP,FDAAMF,FDACCLR,FDACSEC,FDACTRK
	PUBLIC	FDAHOOK,FDAUNH
	EXTRN	TIMERF:FAR
DGROUP	GROUP	SWINDRV_DATA
SWINDRV_TEXT	SEGMENT	PARA	PUBLIC	'CODE'
	ASSUME	CS:SWINDRV_TEXT,DS:DGROUP,ES:NOTHING,SS:DGROUP
_SWINFDCPROC	PROC	FAR
	PUSH	BP
	PUSH	SI
	PUSH	DI
	MOV	BP,SP
	MOV	SI,[BP+0AH]
	MOV	DI,[BP+0CH]
	MOV	AX,[DI]
	MOV	DI,[BP+0EH]
	MOV	BX,[DI]
	MOV	DI,[BP+10H]
	MOV	CX,[DI]
	MOV	DI,[BP+12H]
	MOV	DX,[DI]
	CALL	CS:[SI+OFFSET JMPTBL]
	PUSH	AX
	LAHF
	MOV	AL,AH
	XOR	AH,AH
	MOV	DI,[BP+14H]
	MOV	[DI],AX
	POP	AX
	MOV	DI,[BP+0CH]
	MOV	[DI],AX
	MOV	DI,[BP+0EH]
	MOV	[DI],BX
	MOV	DI,[BP+10H]
	MOV	[DI],CX
	MOV	DI,[BP+12H]
	MOV	[DI],DX
	POP	DI
	POP	SI
	POP	BP
	RET
_SWINFDCPROC	ENDP
M$SWINFDC_INTR	PROC	FAR
	STI
	CALL	CS:[SI+OFFSET JMPTBL]
	RET	2
M$SWINFDC_INTR	ENDP
M$SWINFDC_NEAR	PROC	NEAR
	JMP	CS:[SI+OFFSET JMPTBL]
M$SWINFDC_NEAR	ENDP
DELAY	PROC	NEAR
	PUSH	AX
	INC	CX
	JMP	SHORT	$+2
	IN	AL,61H
	TEST	AL,10H
	JNZ	L2
L1:	JMP	SHORT	$+2
	IN	AL,61H
	TEST	AL,10H
	JZ	L1
	DEC	CX
	JZ	L3
L2:	JMP	SHORT	$+2
	IN	AL,61H
	TEST	AL,10H
	JNZ	L2
	DEC	CX
	JNZ	L1
L3:	POP	AX
	RET
DELAY	ENDP
WUBR	PROC	NEAR
	PUSH	AX
L4:	IN	AL,DX
	TEST	AL,AH
	JZ	L9
L5:	JMP	SHORT	$+2
	IN	AL,61H
	TEST	AL,10H
	JZ	L5
	DEC	CX
	JZ	L8
L6:	IN	AL,DX
	TEST	AL,AH
	JZ	L9
L7:	JMP	SHORT	$+2
	IN	AL,61H
	TEST	AL,10H
	JNZ	L7
	DEC	CX
	JNZ	L4
L8:	STC
L9:	POP	AX
	RET
WUBR	ENDP
WUBS	PROC	NEAR
	PUSH	AX
L10:	IN	AL,DX
	TEST	AL,AH
	JNZ	L15
L11:	JMP	SHORT	$+2
	IN	AL,61H
	TEST	AL,10H
	JZ	L11
	DEC	CX
	JZ	L14
L12:	IN	AL,DX
	TEST	AL,AH
	JNZ	L15
L13:	JMP	SHORT	$+2
	IN	AL,61H
	TEST	AL,10H
	JNZ	L13
	DEC	CX
	JNZ	L10
L14:	STC
L15:	POP	AX
	RET
WUBS	ENDP
WAINT	PROC	NEAR
	PUSH	AX
M1:	TEST	BYTE PTR ES:[3EH],80H
	JNZ	M4
	JMP	SHORT	$+2
	IN	AL,61H
	TEST	AL,10H
	JZ	M1
	DEC	CX
	JZ	M3
M2:	TEST	BYTE PTR ES:[3EH],80H
	JNZ	M4
	JMP	SHORT	$+2
	IN	AL,61H
	TEST	AL,10H
	JNZ	M2
	DEC	CX
	JNZ	M1
M3:	STC
M4:	POP	AX
	RET
WAINT	ENDP
OUT_FDC	PROC	NEAR
	PUSH	CX
	PUSH	DX
	MOV	CX,2
	CALL	DELAY
	MOV	DX,3F4H
	PUSH	AX
	MOV	AH,40H
	XOR	CX,CX
	CALL	WUBR
	POP	AX
	JC	@F
	PUSH	AX
	MOV	AH,80H
	XOR	CX,CX
	CALL	WUBS
	POP	AX
	JC	@F
	MOV	DX,3F5H
	MOV	AL,AH
	OUT	DX,AL
	JMP	SHORT	$+2
@@:	POP	DX
	POP	CX
	RET
OUT_FDC	ENDP
IN_FDC	PROC	NEAR
	PUSH	CX
	PUSH	DX
	MOV	CX,2
	CALL	DELAY
	MOV	DX,3F4H
	MOV	AH,80H
	XOR	CX,CX
	CALL	WUBS
	JC	G2
	IN	AL,DX
	TEST	AL,40H
	JNZ	G1
	TEST	DX,DX
	STC
	JMP	G2
G1:	JMP	SHORT	$+2
	JMP	SHORT	$+2
	MOV	DX,3F5H
	IN	AL,DX
G2:	POP	DX
	POP	CX
	RET
IN_FDC	ENDP
PULSE	PROC	NEAR
	PUSH	AX
	PUSH	CX
	PUSH	DX
	PUSH	ES
	MOV	AX,40H
	MOV	ES,AX
	CLI
	MOV	AL,ES:[3FH]
	ROL	AL,4
	AND	AL,0FBH
	OR	AL,8
	MOV	DX,3F2H
	OUT	DX,AL
	MOV	CX,1
	CALL	DELAY
	OR	AL,0CH
	OUT	DX,AL
	STI
	POP	ES
	POP	DX
	POP	CX
	POP	AX
	RET
PULSE	ENDP
MOT_STR	PROC	NEAR
	PUSH	AX
	PUSH	CX
	PUSH	DX
	PUSH	ES
	MOV	AX,40H
	MOV	ES,AX
	CLI
	AND	BYTE PTR ES:[3FH],11001111B
	MOV	CH,DL
	SHL	DL,4
	OR	ES:[3FH],DL
	MOV	CL,CH
	MOV	DL,ES:[3FH]
	INC	CL
	SHR	DL,CL
	JC	G8
	MOV	DL,1
	DEC	CL
	SHL	DL,CL
	OR	ES:[3FH],DL
	STI
	MOV	AL,ES:[3FH]
	ROR	AL,4
	OR	AL,0CH
	MOV	DX,3F2H
	OUT	DX,AL
	PUSH	DS
	PUSH	SI
	XOR	SI,SI
	MOV	DS,SI
	LDS	SI,DWORD PTR DS:[78H]
	MOV	AL,[SI+0AH]
	POP	SI
	POP	DS
@@:	MOV	CX,208EH
	CALL	DELAY
	DEC	AL
	JNZ	@B
	JMP	G9
G8:	STI
	MOV	AL,ES:[3FH]
	ROR	AL,4
	OR	AL,0CH
	MOV	DX,3F2H
	OUT	DX,AL
G9:	POP	ES
	POP	DX
	POP	CX
	POP	AX
	RET
MOT_STR	ENDP
DC_CHK	PROC	NEAR
	PUSH	CX
	MOV	AH,0
	PUSH	DX
	MOV	DX,3F7H
	IN	AL,DX
	POP	DX
	SHL	AL,1
	JNC	@F
	CALL	RST_MED
	CALL	FDC_INI
	JC	@F
	MOV	CH,1
	CALL	HD_POS
	JC	@F
	XOR	CH,CH
	CALL	HD_POS
	JC	@F
	MOV	AH,6
	PUSH	DX
	MOV	DX,3F7H
	IN	AL,DX
	POP	DX
	SHL	AL,1
	JNC	@F
	MOV	AH,80H
	CLC
@@:	POP	CX
	RET
DC_CHK	ENDP
SET_XFR	PROC	NEAR
	PUSH	AX
	PUSH	DX
	PUSH	ES
	MOV	AX,40H
	MOV	ES,AX
	MOV	AL,ES:[8BH]
	AND	AL,11000000B
	OR	DL,AL
	MOV	AL,DH
	ROR	DH,2
	CMP	DL,DH
	JE	@F
	AND	BYTE PTR ES:[8BH],00111111B
	OR	ES:[8BH],DH
	MOV	DX,3F7H
	OUT	DX,AL
@@:	POP	ES
	POP	DX
	POP	AX
	RET
SET_XFR	ENDP
WA_INT	PROC	NEAR
	PUSH	CX
	PUSH	ES
	MOV	CX,40H
	MOV	ES,CX
	XOR	CX,CX
	CALL	WAINT
	JNC	@F
	XOR	CX,CX
	CALL	WAINT
@@:	POP	ES
	POP	CX
	RET
WA_INT	ENDP
FDC_CMD	PROC	NEAR
	PUSH	BX
	PUSH	CX
	MOV	CL,[BX]
	XOR	CH,CH
	INC	BX
@@:	MOV	AH,[BX]
	INC	BX
	CALL	OUT_FDC
	JC	@F
	LOOP	@B
@@:	POP	CX
	POP	BX
	RET
FDC_CMD	ENDP
FDC_STS	PROC	NEAR
	PUSH	BX
	PUSH	CX
	MOV	CL,[BX]
	XOR	CH,CH
	INC	BX
@@:	CALL	IN_FDC
	JC	@F
	MOV	[BX],AL
	INC	BX
	LOOP	@B
	MOV	CX,2
	CALL	DELAY
	PUSH	DX
	MOV	DX,3F4H
	IN	AL,DX
	POP	DX
	TEST	AL,10H
	JZ	@F
	STC
@@:	POP	CX
	POP	BX
	RET
FDC_STS	ENDP
SPECIFY	PROC	NEAR
	PUSH	AX
	PUSH	BX
	PUSH	DS
	MOV	AX,DGROUP
	MOV	DS,AX
	LEA	BX,[SPC_CMD]
	MOV	[BX+2],DL
	MOV	[BX+3],DH
	CALL	FDC_CMD
	POP	DS
	POP	BX
	POP	AX
	RET
SPECIFY	ENDP
RECAL	PROC	NEAR
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DS
	PUSH	ES
	MOV	AX,DGROUP
	MOV	DS,AX
	MOV	AX,40H
	MOV	ES,AX
	AND	BYTE PTR ES:[3EH],7FH
	LEA	BX,[RCL_CMD]
	MOV	[BX+2],DL
	CALL	FDC_CMD
	JC	@F
	CALL	WA_INT
	JC	@F
	LEA	BX,[SIS_CMD]
	CALL	FDC_CMD
	JC	@F
	LEA	BX,[SIS_STS]
	CALL	FDC_STS
	JC	@F
	MOV	AL,[BX+1]
	TEST	AL,AL
	STC
	JS	@F
	SHL	AL,1
	STC
	JS	@F
	SHL	AL,1
	XOR	AL,10000000B
	STC
	JS	@F
	MOV	BL,DL
	SHL	BL,4
	OR	BL,DL
	OR	BL,10010100B
	XOR	BH,BH
	MOV	BYTE PTR ES:[BX],0
	MOV	CL,DL
	MOV	CH,1
	SHL	CH,CL
	OR	ES:[3EH],CH
	MOV	CX,43H
	CALL	DELAY
	CLC
@@:	POP	ES
	POP	DS
	POP	CX
	POP	BX
	POP	AX
	RET
RECAL	ENDP
FDC_INI	PROC	NEAR
	PUSH	AX
	PUSH	BX
	PUSH	DX
	PUSH	DS
	PUSH	ES
	MOV	AX,DGROUP
	MOV	DS,AX
	MOV	AX,40H
	MOV	ES,AX
	AND	BYTE PTR ES:[3EH],70H
	CALL	PULSE
	CALL	WA_INT
	JC	G6
	MOV	DX,3F4H
	IN	AL,DX
	TEST	AL,80H
	JZ	G3
	TEST	AL,40H
	JZ	G5
G3:	AND	BYTE PTR ES:[3EH],7FH
	CALL	PULSE
	CALL	WA_INT
	JC	G6
	MOV	DX,3F4H
	IN	AL,DX
	TEST	AL,80H
	JZ	G4
	TEST	AL,40H
	JZ	G5
G4:	TEST	DX,DX
	STC
	JMP	G6
G5:	LEA	BX,[SIS_CMD]
	CALL	FDC_CMD
	JC	G6
	LEA	BX,[SIS_STS]
	CALL	FDC_STS
	JC	G6
	MOV	AL,[BX+1]
	AND	AL,11000000B
	CMP	AL,11000000B
	JNE	G4
G6:	PUSH	DS
	XOR	AX,AX
	MOV	DS,AX
	LDS	BX,DWORD PTR DS:[78H]
	MOV	DX,[BX]
	POP	DS
	CALL	SPECIFY
	POP	ES
	POP	DS
	POP	DX
	POP	BX
	POP	AX
	RET
FDC_INI	ENDP
HD_POS	PROC	NEAR
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DS
	PUSH	ES
	MOV	AX,DGROUP
	MOV	DS,AX
	MOV	AX,40H
	MOV	ES,AX
	MOV	AH,ES:[3EH]
	MOV	CL,DL
	INC	CL
	SHR	AH,CL
	JC	@F
	CALL	RECAL
	JNC	@F
	CALL	RECAL
	JC	G7
@@:	MOV	BL,DL
	SHL	BL,4
	OR	BL,DL
	OR	BL,10010100B
	XOR	BH,BH
	CMP	ES:[BX],CH
	JE	G7
	AND	BYTE PTR ES:[3EH],7FH
	LEA	BX,[SEK_CMD]
	MOV	[BX+2],DL
	MOV	[BX+3],CH
	CALL	FDC_CMD
	JC	G7
	CALL	WA_INT
	JC	G7
	LEA	BX,[SIS_CMD]
	CALL	FDC_CMD
	JC	G7
	LEA	BX,[SIS_STS]
	CALL	FDC_STS
	JC	G7
	MOV	AL,[BX+1]
	TEST	AL,AL
	STC
	JS	G7
	SHL	AL,1
	STC
	JS	G7
	SHL	AL,1
	XOR	AL,10000000B
	STC
	JS	G7
	MOV	BL,DL
	SHL	BL,4
	OR	BL,DL
	OR	BL,10010100B
	XOR	BH,BH
	MOV	ES:[BX],CH
	PUSH	DS
	XOR	AX,AX
	MOV	DS,AX
	LDS	BX,DWORD PTR DS:[78H]
	MOV	AL,[BX+9]
	POP	DS
@@:	TEST	AL,AL
	JZ	G7
	MOV	CX,43H
	CALL	DELAY
	DEC	AL
	JMP	@B
G7:	POP	ES
	POP	DS
	POP	CX
	POP	BX
	POP	AX
	RET
HD_POS	ENDP
RST_MED	PROC	NEAR
	PUSH	BX
	PUSH	ES
	MOV	BX,40H
	MOV	ES,BX
	MOV	BX,90H
	ADD	BL,DL
	AND	BYTE PTR ES:[BX],11101111B
	POP	ES
	POP	BX
	RET
RST_MED	ENDP
END_OP	PROC	NEAR
	PUSH	BX
	PUSH	DS
	XOR	BX,BX
	MOV	DS,BX
	LDS	BX,DWORD PTR DS:[78H]
	MOV	DH,[BX+2]
	MOV	BX,40H
	MOV	DS,BX
	CMP	DL,0FFH
	JNE	@F
	MOV	DL,DS:[41H]
@@:	MOV	DS:[41H],DL
	MOV	DS:[40H],DH
	POP	DS
	POP	BX
	RET
END_OP	ENDP
BIOSERR	PROC	NEAR
	PUSH	BX
	PUSH	DS
	MOV	BX,40H
	MOV	DS,BX
	MOV	DL,DS:[41H]
	POP	DS
	POP	BX
	RET
BIOSERR	ENDP
FDARDID	PROC	FAR
	PUSH	BP
	MOV	BP,SP
	MOV	AX,40H
	MOV	ES,AX
	AND	BYTE PTR ES:[3EH],7FH
	MOV	BX,[BP+0AH]
	MOV	CX,2
@@:	MOV	AH,[BX]
	CALL	OUT_FDC
	JC	F1
	ADD	BX,2
	LOOP	@B
	CALL	WA_INT
	JC	F1
	PUSH	2
	CALL	TIMERF
	MOV	BX,[BP+8]
	MOV	[BX],AX
	MOV	[BX+2],DX
	MOV	BX,[BP+6]
	MOV	CX,7
@@:	CALL	FDACSFC
	JC	F1
	MOV	[BX],AL
	ADD	BX,2
	LOOP	@B
	XOR	AX,AX
	XOR	DX,DX
	POP	BP
	RET	6
F1:	MOV	AX,1
	JZ	@F
	MOV	AX,2
@@:	XOR	DX,DX
	POP	BP
	RET	6
FDARDID	ENDP
FDACSFC	PROC	NEAR
	PUSH	CX
	PUSH	DX
	MOV	DX,3F4H
	MOV	AH,80H
	XOR	CX,CX
	CALL	WUBS
	JC	F3
	IN	AL,DX
	TEST	AL,40H
	JNZ	F2
	TEST	DX,DX
	STC
	JMP	F3
F2:	JMP	SHORT	$+2
	JMP	SHORT	$+2
	MOV	DX,3F5H
	IN	AL,DX
F3:	POP	DX
	POP	CX
	RET
FDACSFC	ENDP
FDASPOS	PROC	FAR
	PUSH	BP
	MOV	BP,SP
	MOV	AX,40H
	MOV	ES,AX
	AND	BYTE PTR ES:[3EH],7FH
	MOV	BX,[BP+8]
	MOV	CX,9
@@:	MOV	AH,[BX]
	CALL	OUT_FDC
	JC	F4
	ADD	BX,2
	LOOP	@B
	CALL	WA_INT
	JC	F4
	PUSH	20H
	CALL	TIMERF
	MOV	BX,[BP+6]
	MOV	CX,7
@@:	CALL	IN_FDC
	JC	F4
	MOV	[BX],AL
	ADD	BX,2
	LOOP	@B
	XOR	AX,AX
	XOR	DX,DX
	POP	BP
	RET	4
F4:	MOV	AX,1
	JZ	@F
	MOV	AX,2
@@:	XOR	DX,DX
	POP	BP
	RET	4
FDASPOS	ENDP
FDAAGAP	PROC	FAR
	PUSH	BP
	PUSH	SI
	PUSH	DI
	MOV	BP,SP
	LES	DI,[BP+10H]
	MOV	SI,[BP+0EH]
	CALL	FDADBTS
	ADD	DI,2
	SUB	SI,2
	JLE	AGERR
	CMP	BYTE PTR ES:[DI],4FH
	JE	AGLBD
	CMP	BYTE PTR ES:[DI],4EH
	JNE	AGERR
	MOV	AH,3
	CMP	BYTE PTR ES:[DI+1],4EH
	JE	@F
AGLBD:	ADD	DI,4
	SUB	SI,4
	JLE	AGERR
	MOV	AH,2
@@:	MOV	DX,DI
	MOV	CX,SI
AGSCAN:	MOV	BX,DI
	MOV	AL,ES:[DI]
@@:	INC	DI
	DEC	SI
	JLE	AGERR
	CMP	AL,ES:[DI]
	JE	@B
	PUSH	BX
	MOV	BX,[BP+0EH]
	SUB	BX,[BP+0CH]
	CMP	SI,BX
	POP	BX
	JLE	AGCHK
	CMP	AH,1
	JE	AGERR
	ADD	DI,3
	SUB	SI,3
	JLE	AGERR
	MOV	AH,1
	JMP	AGSCAN
AGCHK:	MOV	DI,DX
	MOV	SI,CX
	MOV	CX,8
@@:	CMP	BYTE PTR ES:[BX],4EH
	JE	@F
	CMP	BYTE PTR ES:[BX],90H
	JE	@F
	CALL	FDADBIT
	LOOP	@B
	JMP	AGERR
@@:	DEC	SI
	JLE	AGERR
	MOV	AL,ES:[BX]
	CMP	AH,1
	JE	AGCLR
	CMP	AH,2
	JE	AGRET
	CALL	FDAGLEN
	JMP	AGRET
AGCLR:	INC	DI
	DEC	SI
	JLE	AGERR
	CMP	ES:[DI],AL
	JNE	AGCLR
	CALL	FDAGLEN
	JMP	AGRET
AGERR:	XOR	AX,AX
AGRET:	XOR	DX,DX
	POP	DI
	POP	SI
	POP	BP
	RET	0AH
FDAAGAP	ENDP
FDAGLEN	PROC	NEAR
	MOV	CH,AL
	XOR	AL,AL
GLGAP:	MOV	DH,ES:[DI]
	CMP	DH,CH
	JNE	GLIDAM
	INC	DI
	DEC	SI
	JLE	GLERR
	INC	AL
	JMP	GLGAP
GLIDAM:	CMP	SI,10H
	JL	GLERR
	LEA	SI,[IDP_ARR]
	CMP	CH,4EH
	JE	@F
	LEA	SI,[IDN_ARR]
@@:	PUSH	AX
	CALL	FDACARR
	POP	AX
	JC	GLERR
	RET
GLERR:	XOR	AX,AX
	RET
FDAGLEN	ENDP
FDAAMF	PROC	FAR
	PUSH	BP
	MOV	BP,SP
	LES	BX,[BP+0AH]
	MOV	CX,[BP+8]
	MOV	DX,[BP+6]
A1:	MOV	AX,ES:[BX]
	TEST	AX,AX
	JE	A2
	CMP	AX,0FFFFH
	JNE	A3
A2:	CMP	ES:[BX+2],AX
	JNE	A3
	DEC	DX
	JZ	A4
	ADD	BX,10H
	SUB	CX,10H
	JNC	A3
	MOV	CX,0FFFFH
	JMP	AR
A3:	INC	BX
	LOOP	A1
	DEC	CX
	JMP	AR
A4:	MOV	AL,ES:[BX]
	TEST	AL,AL
	JE	A5
	CMP	AL,0FFH
	JNE	A6
A5:	MOV	AH,AL
	INC	BX
	LOOP	A4
	DEC	CX
	JMP	AR
A6:	XOR	AL,AH
A7:	SHL	AL,1
	JC	A8
	INC	DX
	JMP	A7
A8:	SHL	CX,3
	SUB	CX,DX
AR:	MOV	AX,CX
	XOR	DX,DX
	POP	BP
	RET	8
FDAAMF	ENDP
FDACCLR	PROC	FAR
	PUSH	BP
	PUSH	SI
	PUSH	DI
	MOV	BP,SP
	LES	DI,[BP+0EH]
	MOV	SI,[BP+0CH]
	CALL	FDADBTS
	MOV	AX,[BP+0AH]
	MOV	[NSP_ARR],AL
	XOR	CL,CL
	CALL	FDACDAT
	MOV	AX,1
	JC	CC
	XOR	AL,AL
	CALL	FDACCRC
	MOV	AX,2
	JC	CC
	LEA	SI,[NSP_ARR]
	CALL	FDACARR
	MOV	AX,3
	JC	CC
	XOR	CL,CL
	CALL	FDACDAT
	MOV	AX,4
	JC	CC
	XOR	AX,AX
CC:	XOR	DX,DX
	POP	DI
	POP	SI
	POP	BP
	RET	8
FDACCLR	ENDP
FDACSEC	PROC	FAR
	PUSH	BP
	PUSH	SI
	PUSH	DI
	MOV	BP,SP
	LES	DI,[BP+0CH]
	MOV	SI,[BP+0AH]
	CALL	FDADBTS
	XOR	CL,CL
	CALL	FDACDAT
	MOV	AX,4
	JC	CA
	XOR	AL,AL
	CALL	FDACCRC
	MOV	AX,5
	JC	CA
	INC	DI
	CALL	FDACBTA
	MOV	AX,6
	JC	CA
	XOR	AX,AX
CA:	XOR	DX,DX
	POP	DI
	POP	SI
	POP	BP
	RET	6
FDACSEC	ENDP
FDACTRK	PROC	FAR
	PUSH	BP
	PUSH	SI
	PUSH	DI
	MOV	BP,SP
	LES	DI,[BP+10H]
	MOV	SI,[BP+0EH]
	CALL	FDADBTS
	MOV	AX,[BP+0CH]
	MOV	[NSP_ARR],AL
	DEC	WORD PTR [BP+0AH]
@@:	MOV	CL,2
	CALL	FDACDAT
	MOV	AX,1
	JC	CE
	MOV	AL,2
	CALL	FDACCRC
	MOV	AX,2
	JC	CE
	LEA	SI,[NSP_ARR]
	CALL	FDACARR
	MOV	AX,3
	JC	CE
	DEC	WORD PTR [BP+0AH]
	JNZ	@B
	MOV	CL,2
	CALL	FDACDAT
	MOV	AX,4
	JC	CE
	MOV	AL,2
	CALL	FDACCRC
	MOV	AX,5
	JC	CE
	INC	DI
	CALL	FDACBTA
	MOV	AX,6
	JC	CE
	LEA	SI,[FGP_ARR]
	CMP	DH,4EH
	JE	@F
	MOV	ES:[DI],DH
	LEA	SI,[FGN_ARR]
@@:	CALL	FDACARR
	MOV	AX,7
	JC	CE
	XOR	AX,AX
CE:	XOR	DX,DX
	POP	DI
	POP	SI
	POP	BP
	RET	0AH
FDACTRK	ENDP
FDACDAT	PROC	NEAR
	MOV	AX,40H
	SHL	AX,CL
	MOV	CX,AX
	MOV	AX,0F6F6H
	REPE	SCASW
	JE	@F
	SUB	DI,2
	STC
@@:	RET
FDACDAT	ENDP
FDACCRC	PROC	NEAR
	LEA	SI,[CRC_TBL]
	MOV	BL,AL
	XOR	BH,BH
	SHL	BX,1
	MOV	DX,[BX+SI]
	CMP	DX,ES:[DI]
	STC
	JNE	@F
	ADD	DI,2
@@:	RET
FDACCRC	ENDP
FDACBTA	PROC	NEAR
@@:	INC	DI
	CMP	BYTE PTR ES:[DI],4EH
	JE	@B
	AND	BYTE PTR ES:[DI],0F0H
	CMP	BYTE PTR ES:[DI],40H
	JNE	@F
	INC	DI
@@:	INC	DI
	MOV	CX,8
C3:	MOV	AL,ES:[DI]
	TEST	AL,AL
	JNE	@F
	LEA	SI,[FMP_ARR]
	JMP	C4
@@:	CMP	AL,0FFH
	JNE	@F
	LEA	SI,[FMN_ARR]
	JMP	C4
@@:	CMP	AL,4EH
	JNE	@F
	LEA	SI,[FSP_ARR]
	JMP	C5
@@:	CMP	AL,90H
	JNE	@F
	LEA	SI,[FSN_ARR]
	JMP	C5
@@:	CALL	FDADBIT
	LOOP	C3
	STC
	RET
C4:	INC	DI
	CMP	AL,ES:[DI]
	JE	C4
	MOV	CX,8
@@:	MOV	AL,ES:[DI]
	CMP	AL,0C2H
	JE	C6
	CMP	AL,14H
	JE	C6
	CALL	FDADBIT
	LOOP	@B
	STC
	RET
C5:	INC	DI
	CMP	AL,ES:[DI]
	JE	C5
C6:	CALL	FDACARR
	RET
FDACBTA	ENDP
FDACARR	PROC	NEAR
	PUSH	CX
	CLC
C1:	LODSW
	INC	AL
	JZ	@F
	DEC	AL
	JZ	C2
	XOR	CH,CH
	MOV	CL,AL
	MOV	AL,AH
	REPE	SCASB
	JE	C1
	DEC	DI
	STC
@@:	POP	CX
	MOV	DX,AX
	RET
C2:	DEC	SI
	INC	DI
	JMP	C1
FDACARR	ENDP
FDADBTS	PROC	NEAR
	MOV	[DBITADR],DI
	ADD	[DBITADR],SI
	RET
FDADBTS	ENDP
FDADBIT	PROC	NEAR
	PUSH	CX
	MOV	CX,DI
	NEG	CX
	MOV	DI,[DBITADR]
	ADD	CX,DI
@@:	DEC	DI
	RCL	BYTE PTR ES:[DI],1
	LOOP	@B
	POP	CX
	RET
FDADBIT	ENDP
FDAHOOK	PROC	FAR
	XOR	AX,AX
	MOV	ES,AX
	CLI
	MOV	AX,ES:[38H]
	MOV	[SVADR0E],AX
	MOV	AX,ES:[3AH]
	MOV	[SVADR0E+2],AX
	MOV	ES:[38H],OFFSET IRQ6
	MOV	ES:[3AH],SEG IRQ6
	STI
	RET
FDAHOOK	ENDP
FDAUNH	PROC	FAR
	XOR	AX,AX
	MOV	ES,AX
	CLI
	MOV	AX,[SVADR0E]
	MOV	ES:[38H],AX
	MOV	AX,[SVADR0E+2]
	MOV	ES:[3AH],AX
	STI
	RET
FDAUNH	ENDP
IRQ6	PROC	FAR
	PUSH	AX
	PUSH	DX
	PUSH	DS
	MOV	AX,40H
	MOV	DS,AX
	OR	BYTE PTR DS:[3EH],10000000B
	MOV	DX,3F4H
	IN	AL,DX
	JMP	SHORT	$+2
	MOV	AL,20H
	OUT	20H,AL
	JMP	SHORT	$+2
	POP	DS
	POP	DX
	POP	AX
	IRET
IRQ6	ENDP
JMPTBL	DW	OFFSET OUT_FDC,OFFSET IN_FDC,OFFSET PULSE,OFFSET MOT_STR
	DW	OFFSET DC_CHK,OFFSET SET_XFR,OFFSET WA_INT,OFFSET FDC_CMD
	DW	OFFSET FDC_STS,OFFSET SPECIFY,OFFSET RECAL,OFFSET FDC_INI
	DW	OFFSET HD_POS,OFFSET RST_MED,OFFSET END_OP,OFFSET BIOSERR
SWINDRV_TEXT	ENDS
SWINDRV_DATA	SEGMENT	WORD	PUBLIC	'DATA'
SPC_CMD	DB	3,3,?,?
RCL_CMD	DB	2,7,?
SIS_CMD	DB	1,8
SIS_STS	DB	2,?,?
SEK_CMD	DB	3,0FH,?,?
SVADR0E	DW	?,?
FSP_ARR	DB	0CH,0
FMP_ARR	DB	3,0C2H,1,0FCH
	DB	32H,4EH
	DB	0CH,0
	DB	3,0A1H,1,0FEH
	DB	0,0,1,1,1,2
	DB	0,0
	DB	0FFH,4EH
FSN_ARR	DB	0CH,0FFH
FMN_ARR	DB	3,14H,1,1
	DB	32H,90H
	DB	0CH,0FFH
	DB	3,0AH,1,0
	DB	0,0,0,1,7CH
	DB	0,0
	DB	0FFH,90H
FGP_ARR	DB	16H,4EH
	DB	0CH,0
	DB	3,0A1H,1,0FBH
	DB	0C8H,0F6H
	DB	0FFH,0F6H
FGN_ARR	DB	16H,90H
	DB	0CH,0FFH
	DB	3,0AH,1,0
	DB	0C7H,0
	DB	0FFH,0
NSP_ARR	DB	50H,4EH
	DB	0CH,0
	DB	3,0A1H,1,0FEH
	DB	0,0,0,1,2
	DB	0,0
	DB	16H,4EH
	DB	0CH,0
	DB	3,0A1H,1,0FBH
	DB	0FFH,0F6H
IDP_ARR	DB	0CH,0
	DB	3,0A1H,1,0FEH
	DB	0FFH,0
IDN_ARR	DB	0CH,0FFH
	DB	3,0AH,1,0
	DB	0FFH,0
DBITADR	DW	?
CRC_TBL	DW	92F2H,0B7CAH,0F62BH,0EC8CH
SWINDRV_DATA	ENDS
	END
